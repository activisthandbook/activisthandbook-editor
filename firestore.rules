rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {

      // HELPER FUNCTIONS
    	function signedIn() {
        return request.auth.uid != null &&
          request.auth.token.email_verified == true
      }

      function getRoles() {
          return get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.roles;
        }

      function hasRole(userRoles, role) {
        return signedIn() && (role in userRoles);
      }

      function doesNotContainFields(fieldsArray){
        return !request.resource.data.keys().hasAny(fieldsArray)
      }

      function validMetadataCreated(){
        return
          request.resource.data.metadata.createdBy == request.auth.uid &&
          request.resource.data.metadata.createdTimestamp == request.time
      }

      function validMetadataUpdated(){
        return
          request.resource.data.metadata.updatedBy == request.auth.uid &&
          request.resource.data.metadata.updatedTimestamp == request.time
      }


      // APP
      match /app/moderator {
        allow read, create, update: if hasRole(getRoles(), "moderator");
      }

      match /app/analytics {
        allow read: if signedIn();
        allow create, update: if hasRole(getRoles(), "moderator");
      }

      // USER PROFILES
      match /userProfiles/{userID} {
        allow read: if signedIn();
        allow create: if
          signedIn() &&
          validMetadataCreated() &&
          validMetadataUpdated() &&
          // User can only edit their own document
          request.auth.uid == userID &&
          // Users cannot set their roles
          (doesNotContainFields(['roles']) || request.resource.data.roles == resource.data.roles);
        allow update: if
          signedIn() &&
          validMetadataUpdated() &&
          // User can only edit their own document
          request.auth.uid == userID &&
          // Users cannot set their roles
          (doesNotContainFields(['roles']) || request.resource.data.roles == resource.data.roles);
      }

      // MENU
      match /menu/draft {
        allow read, create, update: if signedIn();

        match /versions/{versionID} {
          allow read: if signedIn();
          allow create: if
            signedIn() &&
            validMetadataCreated();
          allow delete: if hasRole(getRoles(), "moderator");
        }
      }

       match /menu/publishingQueue {
        allow read, write: if hasRole(getRoles(), "moderator");
      }

      // IMAGES
      match /images/{imageID} {
        allow read: if signedIn()
      }

      // ARTICLES
    	match /draftArticles/{articleID} {
        allow read:
          if signedIn();
        allow create:
          if signedIn() &&
          request.resource.data.publishedFullPath == null &&
          validMetadataCreated() &&
          validMetadataUpdated();
        allow update:
          if signedIn() &&
          validMetadataUpdated() &&
          request.resource.data.publishedFullPath == resource.data.publishedFullPath;
        allow delete:
          if hasRole(getRoles(), "moderator");

        match /versions/{versionID} {
        	allow read, create: if signedIn();
          allow write, delete: if hasRole(getRoles(), "moderator");
        }
      }

      match /publishedArticles/{collectionID} {
        allow read: if signedIn();
      }

      match /languageCollections/{collectionID} {
        allow read: if signedIn();
        allow create: if
          signedIn() &&
          request.resource.data.publishedArticles == null &&
          validMetadataCreated() &&
          validMetadataUpdated();
        allow update: if
          signedIn() &&
          request.resource.data.publishedArticles == resource.data.publishedArticles &&
          validMetadataUpdated();
        allow delete: if hasRole(getRoles(), "moderator")
      }

      match /publishingQueue/{articleID} {
        allow read, create, update: if hasRole(getRoles(), "moderator");
      }

    }
  }
}
